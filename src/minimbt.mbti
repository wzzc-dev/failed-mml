package moonbitlang/minimbt

// Values

// Types and methods
pub(all) struct Fundef {
  name : (String, Type)
  args : Array[(String, Type)]
  body : Syntax
}
impl Fundef {
  from_json(Json) -> Self!
  to_json(Self) -> Json
}
impl Show for Fundef

pub(all) enum Kind {
  Int
  Double
}
impl Eq for Kind
impl Show for Kind

pub(all) struct Name {
  name : String?
  slot : Int
}
impl Name {
  from_json(Json) -> Self!
  from_string(String) -> Self!NameFromStringError
  name_and_slot(String, Int) -> Self
  name_only(String) -> Self
  slot_only(Int) -> Self
  to_json(Self) -> Json
  to_string(Self) -> String
}
impl Compare for Name
impl Eq for Name
impl Hash for Name
impl Show for Name

pub(all) type! NameFromStringError {
  InvalidSlotNumber(String, String)
}
impl Show for NameFromStringError

pub(all) enum Op {
  Add
  Sub
  Mul
  Div
}
impl Eq for Op
impl Show for Op

pub(all) enum Syntax {
  Unit
  Bool(Bool)
  Int(Int)
  Double(Double)
  Var(String)
  Tuple(Array[Syntax])
  Not(Syntax)
  Array(Syntax, Syntax)
  Neg(Syntax, Kind?)
  App(Syntax, Array[Syntax])
  Get(Syntax, Syntax)
  If(Syntax, Syntax, Syntax)
  Prim(Syntax, Syntax, Op, Kind?)
  Eq(Syntax, Syntax)
  LE(Syntax, Syntax)
  Let((String, Type), Syntax, Syntax)
  LetRec(Fundef, Syntax)
  LetTuple(Array[(String, Type)], Syntax, Syntax)
  Put(Syntax, Syntax, Syntax)
}
impl Syntax {
  from_json(Json) -> Self!
  to_json(Self) -> Json
}
impl Show for Syntax

pub(all) enum Type {
  Unit
  Bool
  Int
  Double
  Fun(Array[Type], Type)
  Tuple(Array[Type])
  Array(Type)
  Var(Ref[Type?])
  Ptr
}
impl Type {
  from_json(Json) -> Self!
  is_float_like(Self) -> Bool
  is_ptr_like(Self) -> Bool
  new_tvar() -> Self
  op_equal(Self, Self) -> Bool
  repr(Self) -> Self
  size_of(Self, Int) -> Int
  to_json(Self) -> Json
}
impl Show for Type

// Type aliases

// Traits

