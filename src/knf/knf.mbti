package moonbitlang/minimbt/knf

alias @moonbitlang/core/immut/hashmap as @hashmap
alias @moonbitlang/minimbt as @minimbt

// Values
fn knf_max_counter(Knf) -> Int

// Types and methods
pub(all) struct FuncDef {
  name : @minimbt.Name
  ty : @minimbt.Type
  args : Array[(@minimbt.Name, @minimbt.Type)]
  body : Knf
}
impl FuncDef {
  from_json(Json) -> Self!
  to_json(Self) -> Json
}
impl Eq for FuncDef
impl Show for FuncDef

pub(all) enum Knf {
  Unit
  Int(Int)
  Double(Double)
  Neg(@minimbt.Name)
  Add(@minimbt.Name, @minimbt.Name)
  Sub(@minimbt.Name, @minimbt.Name)
  Mul(@minimbt.Name, @minimbt.Name)
  Div(@minimbt.Name, @minimbt.Name)
  FNeg(@minimbt.Name)
  FAdd(@minimbt.Name, @minimbt.Name)
  FSub(@minimbt.Name, @minimbt.Name)
  FMul(@minimbt.Name, @minimbt.Name)
  FDiv(@minimbt.Name, @minimbt.Name)
  IfEq(@minimbt.Name, @minimbt.Name, Knf, Knf)
  IfLe(@minimbt.Name, @minimbt.Name, Knf, Knf)
  Let((@minimbt.Name, @minimbt.Type), Knf, Knf)
  Var(@minimbt.Name)
  LetRec(FuncDef, Knf)
  Apply(@minimbt.Name, Array[@minimbt.Name])
  Tuple(Array[@minimbt.Name])
  LetTuple(Array[(@minimbt.Name, @minimbt.Type)], @minimbt.Name, Knf)
  Get(@minimbt.Name, @minimbt.Name)
  Put(@minimbt.Name, @minimbt.Name, @minimbt.Name)
  ExternalArray(@minimbt.Name)
  ExternalFunctionApplication(String, Array[@minimbt.Name])
}
impl Knf {
  from_json(Json) -> Self!
  to_json(Self) -> Json
  to_pretty_print(Self) -> PrettyKnf
}
impl Eq for Knf
impl Show for Knf

type KnfEnv
impl KnfEnv {
  init_counter_from_existing(Self, Knf) -> Unit
  new(@hashmap.T[String, @minimbt.Type]) -> Self
  opt_pass(Self, Knf) -> Knf
  syntax_preprocess(Self, @minimbt.Syntax) -> @minimbt.Syntax
  to_knf(Self, @minimbt.Syntax) -> Knf!KnfErr
}

pub(all) type! KnfErr String
impl ToJson for KnfErr

type PrettyKnf
impl Show for PrettyKnf

// Type aliases
pub typealias LocalEnv = @hashmap.T[String, @minimbt.Type]

pub typealias Name = @minimbt.Name

pub typealias Type = @minimbt.Type

// Traits

